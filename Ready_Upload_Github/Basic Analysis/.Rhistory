midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
#lm.1 <- lm(Exxon_stock_price ~ . - news_sentiment_score, data = df.norm[,-1])
lm.2 <- lm(Exxon_stock_price ~ . , data = df.norm[,-1])
#anova(lm.1, lm.2)
library(MASS)
step.model <- stepAIC(lm.2, direction = "both",
trace = FALSE)
summary(step.model)
step.news <- step(lm.2, scope = list(lower = ~ news_sentiment_score), direction = "both",
trace = FALSE)
summary(step.news)
library(tidyverse)
library(caret)
library(leaps)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model2 <- train(Exxon_stock_price ~ ., data = df.norm[,-1],
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:11),
trControl = train.control
)
#coef(step.model$finalModel, as.numeric(step.model$bestTune))
coef(step.model2$finalModel, as.numeric(step.model2$bestTune))
#step.model$results
lm.3 <- lm(Exxon_stock_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price,
data = df.norm)
#lm.4 <- lm(Exxon_stock_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price + news_sentiment_score,
#           data = df.norm)
#anova(lm.3, lm.4)
summary(lm.3)
estimated_stock <- step.model$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep1 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(Exxon_stock_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'step wise AIC')
estimated_stock <- lm.3$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep2 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(Exxon_stock_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'stepwise CV')
grid.arrange(ggstep1, ggstep2, nrow = 2, ncol = 1)
resiudal_data <- data.frame(df.norm$date , step.model$residuals)
names(resiudal_data) <- c('Date', 'Residual')
ggplot(resiudal_data, aes(x = Residual)) + geom_histogram() + labs(title = 'Histogram of Errors')
ggplot(resiudal_data, aes(x = Date, y = Residual)) + geom_point() + labs(title = 'Erros vs. Date') +
geom_hline(yintercept = 0)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(gridExtra)
news_sentiment <- read.csv("Basic_analysis_data/ave-daily-news-sentiment-BP-2020.csv")
colnames(news_sentiment)[1] <- "date"
# remove the time from news date
news_sentiment$date <- gsub(" 0:00", "", news_sentiment$date)
news_sentiment$date <- gsub("/", "-", news_sentiment$date)
#head(news_sentiment)
# uniform time format
news_sentiment$date <- format(as.Date(news_sentiment$date, "%m-%d-%Y"), '%Y-%m-%d')
news_sentiment$date <- as.Date(news_sentiment$date)
par(mfrow=c(1,2))
hist(news_sentiment$Daily.News.Sentiment, xlab = 'sentiment score', main = 'BP')
plot(news_sentiment$Daily.News.Sentiment ~ as.Date(news_sentiment$date), xlab = 'date',
ylab = 'sentiment score', main = 'BP')
abline(h=-0.2, col = 'red')
NYSE_stock <-
read.csv("Basic_analysis_data/nyse-energy-company-stock-closing-prices-2020.csv")
colnames(NYSE_stock)[1] <- "Stock Price"
NYSE_stock$Date <- as.Date(NYSE_stock$Date)
NYSE_stock <- subset(NYSE_stock, select = -c(Super.Region, Ticker, Time.Level, Source, Sub.Sector, Stock.Attribute, Currency, Data.Provider, Stock.Exchange, Location))
BP <- NYSE_stock[which(NYSE_stock$Stock.Name == "BP P.L.C."),]
par(mfrow=c(1,2))
hist(BP$`Stock Price`, main = '', xlab = 'BP Stock Price')
plot(BP$`Stock Price` ~ as.Date(BP$Date), xlab = 'Date', ylab = 'BP stock price')
Crude_oil_c <- read.csv("Basic_analysis_data/crude-oil-commodity-prices-2020.csv")
Crude_oil_c <- Crude_oil_c[Crude_oil_c$Indicator=="SETTLE",]
colnames(Crude_oil_c)[1] <- "Price"
Crude_oil_c$Date <- as.Date(Crude_oil_c$Date)
ice_brent <- Crude_oil_c[Crude_oil_c$Commodity.And.Exchange == "ICE BRENT CRUDE OIL FUTURES",]
#par(mfrow=c(1,2))
#hist(ice_brent$Price, xlab = 'price', main = "Ice Brent")
#plot(ice_brent$Price ~ as.Date(ice_brent$Date), xlab = 'date', ylab = 'price',
#     main = 'Ice Brent')
NYMEX <- Crude_oil_c[Crude_oil_c$Commodity.And.Exchange == "NYMEX CRUDE OIL FUTURES",]
#par(mfrow=c(1,2))
#hist(NYMEX$Price, main = 'NYMEX', xlab = 'Price')
#plot(NYMEX$Price ~ as.Date(NYMEX$Date), xlab = 'date', ylab = 'price', main = 'NYMEX')
#match.date <- intersect(NYMEX$Date, ice_brent$Date)
#plot(NYMEX[NYMEX$Date %in% match.date,]$Price, ice_brent[ice_brent$Date %in% match.date,]$Price,
#     xlab = 'NYMEX', ylab = 'Ice Brent', main = 'Ice Brent vs. NYMEX')
par(mfrow=c(1,3))
plot(BP$`Stock Price` ~ as.Date(BP$Date), xlab = 'Date', ylab = 'Exxon stock price',
main = 'Exxon')
plot(NYMEX[NYMEX$Price>0,]$Price ~ as.Date(NYMEX[NYMEX$Price>0,]$Date),
xlab = 'date', ylab = 'price', main = 'NYMEX (negative price removed)')
plot(ice_brent$Price ~ as.Date(ice_brent$Date), xlab = 'date', ylab = 'price',
main = 'Ice Brent')
mkt_indicator <- read.csv("Basic_analysis_data/some-stock-market-indicators-&-index-2020.csv")
mkt_indicator$Date <- as.Date(mkt_indicator$Date)
colnames(mkt_indicator)[1] <- "Price"
SP500 <- mkt_indicator[mkt_indicator$Description == 'S&P 500',]
Dow_Jones <- mkt_indicator[mkt_indicator$Description != 'S&P 500',]
ggplot(Dow_Jones, aes(x = Price, fill = Description)) +
geom_histogram(position = "identity", alpha = 0.4)
composite_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES COMPOSITE AVERAGE',]
indust_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES INDUSTRIAL AVERAGE',]
transp_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES TRANSPORTATION AVERAGE',]
utility_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES UTILITY AVERAGE',]
p1 <- ggplot(composite_ave, aes(x = Price))+ geom_histogram() + labs(title = 'COMPOSITE AVERAGE')
p2 <- ggplot(indust_ave, aes(x = Price))+ geom_histogram() + labs(title = 'INDUSTRIAL AVERAGE')
p3 <- ggplot(transp_ave, aes(x = Price))+ geom_histogram() + labs(title = 'TRANSPORTATION AVERAGE')
p4 <- ggplot(utility_ave, aes(x = Price))+ geom_histogram() + labs(title = 'UTILITY AVERAGE')
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(composite_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'COMPOSITE AVERAGE')
p2 <- ggplot(indust_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'INDUSTRIAL AVERAGE')
p3 <- ggplot(transp_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'TRANSPORTATION AVERAGE')
p4 <- ggplot(utility_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'UTILITY AVERAGE')
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
sp1 <- ggplot(data = SP500, aes(x = Price)) + geom_histogram() + labs(title = 'S&P 500')
sp2 <- ggplot(SP500, aes(x = Date, y = Price)) + geom_line() + labs(title = 'S&P 500')
grid.arrange(sp1, sp2, nrow = 1, ncol = 2)
library(readxl)
apple <- read_excel("Basic_analysis_data/apple-mobility-california-2020.xlsx")
apple$Date <- as.Date(apple$Date)
#unique(apple$`Transportation Type`)
apple_transit <- apple[apple$`Transportation Type`=='TRANSIT',]
apple_driving <- apple[apple$`Transportation Type`=='DRIVING',]
apple_walking <- apple[apple$`Transportation Type`=='WALKING',]
ap1 <- ggplot(apple, aes(x = Value, fill = `Transportation Type`)) +
geom_histogram(position = "identity", alpha = 0.5) + labs(title = 'Apple Mobility')
ap1
ap2 <- ggplot(apple, aes(x = Date, y = Value, color = `Transportation Type`)) +
geom_point(position = "identity", alpha = 0.7) + labs(title = 'Apple Mobility')
ap2
#ap2 <- ggplot(apple_driving, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Driving Mobility')
#ap3 <- ggplot(apple_transit, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Transit Mobility')
#ap4 <- ggplot(apple_walking, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Waling Mobility')
#grid.arrange(ap1, ap2, ap3, ap4, nrow = 2, ncol = 2)
google_mob <- read.csv("Basic_analysis_data/google-mobility-index-la-county-2020.csv")
google_mob$Date <- gsub("/", "-", google_mob$Date)
google_mob$Date <- format(as.Date(google_mob$Date, "%m-%d-%Y"), '%Y-%m-%d')
colnames(google_mob)[1] <- "Value"
gp1 <- ggplot(google_mob, aes(x = Value, fill = Indicator)) +
geom_histogram(position = "identity", alpha = 0.5) + labs(title = 'Google Mobility')
gp1+ theme(legend.position="bottom", legend.text = element_text(size = 6)) + guides(fill = guide_legend(nrow = 3))
gp2 <- ggplot(google_mob, aes(x = Date, y = Value)) +
geom_point(aes(color = Indicator)) + labs(title = 'Google Mobility')
gp2 + theme(legend.position="bottom", legend.text = element_text(size = 6)) + guides(colour = guide_legend(nrow = 3))
common_date <- Reduce(intersect, list(news_sentiment$date, BP$Date, ice_brent$Date,
NYMEX$Date, composite_ave$Date, indust_ave$Date,
transp_ave$Date, utility_ave$Date, SP500$Date,
apple_driving$Date, apple_transit$Date, apple_walking$Date))
date <- news_sentiment[news_sentiment$date %in% common_date,]$date
BP_price <- BP[BP$Date %in% common_date,]$`Stock Price`
news_sentiment_score <- news_sentiment[news_sentiment$date %in% common_date,]$Daily.News.Sentiment
ice_brent_settle <- ice_brent[ice_brent$Date %in% common_date,]$Price
NYMEX_settle <- NYMEX[NYMEX$Date %in% common_date,]$Price
DJ_comp <- composite_ave[composite_ave$Date %in% common_date,]$Price
DJ_indus <- indust_ave[indust_ave$Date %in% common_date,]$Price
DJ_tran <- transp_ave[transp_ave$Date %in% common_date,]$Price
DJ_utility <- utility_ave[utility_ave$Date %in% common_date,]$Price
SP500_price <- SP500[SP500$Date %in% common_date,]$Price
apple_driving_index <- apple_driving[apple_driving$Date %in% common_date,]$Value
apple_transit_index <- apple_transit[apple_transit$Date %in% common_date,]$Value
apple_walking_index <- apple_walking[apple_walking$Date %in% common_date,]$Value
df <- data.frame(date, BP_price, news_sentiment_score, ice_brent_settle, NYMEX_settle, DJ_comp,
DJ_indus, DJ_tran, DJ_utility, SP500_price, apple_driving_index, apple_transit_index,
apple_walking_index)
#df.adj <- data.frame(df[-81,c(1:2, 4:13)], df[-1, 3])
#colnames(df.adj)[13] <- "news_sentiment_score"
#df.norm <- data.frame(df[,1], scale(df[,2]), df[,3], scale(df[,4:13]))
df.norm <- data.frame(df[,1], scale(df[,-1]))
colnames(df.norm) <- names(df)
#attach(df.adj)
cormat <- round(cor(df.norm[,-1]),2)
library(reshape2)
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
lm.1 <- lm(BP_price ~ . - news_sentiment_score, data = df.norm[,-1])
lm.2 <- lm(BP_price ~ . , data = df.norm[,-1])
anova(lm.1, lm.2)
library(MASS)
step.model <- stepAIC(lm.2, direction = "both",
trace = FALSE)
summary(step.model)
step.news <- step(lm.2, scope = list(lower = ~ news_sentiment_score), direction = "both",
trace = FALSE)
summary(step.news)
library(tidyverse)
library(caret)
library(leaps)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model2 <- train(BP_price ~ ., data = df.norm[,-1],
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:11),
trControl = train.control
)
#coef(step.model$finalModel, as.numeric(step.model$bestTune))
coef(step.model2$finalModel, as.numeric(step.model2$bestTune))
#step.model$results
lm.3 <- lm(BP_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price,
data = df.norm)
lm.4 <- lm(BP_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price + news_sentiment_score,
data = df.norm)
anova(lm.3, lm.4)
estimated_stock <- step.model$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep1 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(BP_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'step wise AIC')
estimated_stock <- lm.4$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep2 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(BP_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'stepwise CV')
grid.arrange(ggstep1, ggstep2, nrow = 2, ncol = 1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(gridExtra)
news_sentiment <- read.csv("Basic_analysis_data/ave-daily-news-sentiment-chevron-2020.csv")
colnames(news_sentiment)[1] <- "date"
# remove the time from news date
news_sentiment$date <- gsub(" 0:00", "", news_sentiment$date)
news_sentiment$date <- gsub("/", "-", news_sentiment$date)
#head(news_sentiment)
# uniform time format
news_sentiment$date <- format(as.Date(news_sentiment$date, "%m-%d-%Y"), '%Y-%m-%d')
news_sentiment$date <- as.Date(news_sentiment$date)
par(mfrow=c(1,2))
hist(news_sentiment$Daily.News.Sentiment, xlab = 'sentiment score', main = '')
plot(news_sentiment$Daily.News.Sentiment ~ as.Date(news_sentiment$date), xlab = 'date',
ylab = 'sentiment score')
abline(h=-0.2, col = 'red')
NYSE_stock <-
read.csv("Basic_analysis_data/nyse-energy-company-stock-closing-prices-2020.csv")
colnames(NYSE_stock)[1] <- "Stock Price"
NYSE_stock$Date <- as.Date(NYSE_stock$Date)
NYSE_stock <- subset(NYSE_stock, select = -c(Super.Region, Ticker, Time.Level, Source, Sub.Sector, Stock.Attribute, Currency, Data.Provider, Stock.Exchange, Location))
chevron_stock <- NYSE_stock[which(NYSE_stock$Stock.Name == "CHEVRON CORPORATION"),]
par(mfrow=c(1,2))
hist(chevron_stock$`Stock Price`, main = '', xlab = 'chevron Stock Price')
plot(chevron_stock$`Stock Price` ~ as.Date(chevron_stock$Date), xlab = 'Date', ylab = 'chevron stock price')
Crude_oil_c <- read.csv("Basic_analysis_data/crude-oil-commodity-prices-2020.csv")
Crude_oil_c <- Crude_oil_c[Crude_oil_c$Indicator=="SETTLE",]
colnames(Crude_oil_c)[1] <- "Price"
Crude_oil_c$Date <- as.Date(Crude_oil_c$Date)
ice_brent <- Crude_oil_c[Crude_oil_c$Commodity.And.Exchange == "ICE BRENT CRUDE OIL FUTURES",]
par(mfrow=c(1,2))
hist(ice_brent$Price, xlab = 'price', main = "Ice Brent")
plot(ice_brent$Price ~ as.Date(ice_brent$Date), xlab = 'date', ylab = 'price',
main = 'Ice Brent')
NYMEX <- Crude_oil_c[Crude_oil_c$Commodity.And.Exchange == "NYMEX CRUDE OIL FUTURES",]
par(mfrow=c(1,2))
hist(NYMEX$Price, main = 'NYMEX', xlab = 'Price')
plot(NYMEX$Price ~ as.Date(NYMEX$Date), xlab = 'date', ylab = 'price', main = 'NYMEX')
match.date <- intersect(NYMEX$Date, ice_brent$Date)
plot(NYMEX[NYMEX$Date %in% match.date,]$Price, ice_brent[ice_brent$Date %in% match.date,]$Price,
xlab = 'NYMEX', ylab = 'Ice Brent', main = 'Ice Brent vs. NYMEX')
par(mfrow=c(1,3))
plot(chevron_stock$`Stock Price` ~ as.Date(chevron_stock$Date), xlab = 'Date', ylab = 'chevron stock price',
main = 'chevron')
plot(NYMEX[NYMEX$Price>0,]$Price ~ as.Date(NYMEX[NYMEX$Price>0,]$Date),
xlab = 'date', ylab = 'price', main = 'NYMEX (negative price removed)')
plot(ice_brent$Price ~ as.Date(ice_brent$Date), xlab = 'date', ylab = 'price',
main = 'Ice Brent')
mkt_indicator <- read.csv("Basic_analysis_data/some-stock-market-indicators-&-index-2020.csv")
mkt_indicator$Date <- as.Date(mkt_indicator$Date)
colnames(mkt_indicator)[1] <- "Price"
SP500 <- mkt_indicator[mkt_indicator$Description == 'S&P 500',]
Dow_Jones <- mkt_indicator[mkt_indicator$Description != 'S&P 500',]
ggplot(Dow_Jones, aes(x = Price, fill = Description)) +
geom_histogram(position = "identity", alpha = 0.4)
composite_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES COMPOSITE AVERAGE',]
indust_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES INDUSTRIAL AVERAGE',]
transp_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES TRANSPORTATION AVERAGE',]
utility_ave <- Dow_Jones[Dow_Jones$Description=='DOW JONES UTILITY AVERAGE',]
p1 <- ggplot(composite_ave, aes(x = Price))+ geom_histogram() + labs(title = 'COMPOSITE AVERAGE')
p2 <- ggplot(indust_ave, aes(x = Price))+ geom_histogram() + labs(title = 'INDUSTRIAL AVERAGE')
p3 <- ggplot(transp_ave, aes(x = Price))+ geom_histogram() + labs(title = 'TRANSPORTATION AVERAGE')
p4 <- ggplot(utility_ave, aes(x = Price))+ geom_histogram() + labs(title = 'UTILITY AVERAGE')
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(composite_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'COMPOSITE AVERAGE')
p2 <- ggplot(indust_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'INDUSTRIAL AVERAGE')
p3 <- ggplot(transp_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'TRANSPORTATION AVERAGE')
p4 <- ggplot(utility_ave, aes(x=Date, y=Price)) + geom_line() + labs(title = 'UTILITY AVERAGE')
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
sp1 <- ggplot(data = SP500, aes(x = Price)) + geom_histogram() + labs(title = 'S&P 500')
sp2 <- ggplot(SP500, aes(x = Date, y = Price)) + geom_line() + labs(title = 'S&P 500')
grid.arrange(sp1, sp2, nrow = 1, ncol = 2)
library(readxl)
apple <- read_excel("Basic_analysis_data/apple-mobility-california-2020.xlsx")
apple$Date <- as.Date(apple$Date)
#unique(apple$`Transportation Type`)
apple_transit <- apple[apple$`Transportation Type`=='TRANSIT',]
apple_driving <- apple[apple$`Transportation Type`=='DRIVING',]
apple_walking <- apple[apple$`Transportation Type`=='WALKING',]
ap1 <- ggplot(apple, aes(x = Value, fill = `Transportation Type`)) +
geom_histogram(position = "identity", alpha = 0.5) + labs(title = 'Apple Mobility')
ap1
ap2 <- ggplot(apple, aes(x = Date, y = Value, color = `Transportation Type`)) +
geom_point(position = "identity", alpha = 0.7) + labs(title = 'Apple Mobility')
ap2
#ap2 <- ggplot(apple_driving, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Driving Mobility')
#ap3 <- ggplot(apple_transit, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Transit Mobility')
#ap4 <- ggplot(apple_walking, aes(x = Value)) + geom_histogram() + labs(title = 'Apple Waling Mobility')
#grid.arrange(ap1, ap2, ap3, ap4, nrow = 2, ncol = 2)
#google_mob <- read.csv("C:/Users/yuche/Desktop/UCF-Math/2021 DS Comp/google-mobility-index-la-county-2020.csv")
#google_mob$Date <- gsub("/", "-", google_mob$Date)
#google_mob$Date <- format(as.Date(google_mob$Date, "%m-%d-%Y"), '%Y-%m-%d')
#colnames(google_mob)[1] <- "Value"
#gp1 <- ggplot(google_mob, aes(x = Value, fill = Indicator)) +
# geom_histogram(position = "identity", alpha = 0.5) + labs(title = 'Google Mobility')
#gp1+ theme(legend.position="bottom", legend.text = element_text(size = 6)) + guides(fill = guide_legend(nrow = 3))
#gp2 <- ggplot(google_mob, aes(x = Date, y = Value)) +
# geom_point(aes(color = Indicator)) + labs(title = 'Google Mobility')
#gp2 + theme(legend.position="bottom", legend.text = element_text(size = 6)) + guides(colour = guide_legend(nrow = 3))
common_date <- Reduce(intersect, list(news_sentiment$date, chevron_stock$Date, ice_brent$Date,
NYMEX$Date, composite_ave$Date, indust_ave$Date,
transp_ave$Date, utility_ave$Date, SP500$Date,
apple_driving$Date, apple_transit$Date, apple_walking$Date))
date <- news_sentiment[news_sentiment$date %in% common_date,]$date
chevron_stock_price <- chevron_stock[chevron_stock$Date %in% common_date,]$`Stock Price`
news_sentiment_score <- news_sentiment[news_sentiment$date %in% common_date,]$Daily.News.Sentiment
ice_brent_settle <- ice_brent[ice_brent$Date %in% common_date,]$Price
NYMEX_settle <- NYMEX[NYMEX$Date %in% common_date,]$Price
DJ_comp <- composite_ave[composite_ave$Date %in% common_date,]$Price
DJ_indus <- indust_ave[indust_ave$Date %in% common_date,]$Price
DJ_tran <- transp_ave[transp_ave$Date %in% common_date,]$Price
DJ_utility <- utility_ave[utility_ave$Date %in% common_date,]$Price
SP500_price <- SP500[SP500$Date %in% common_date,]$Price
apple_driving_index <- apple_driving[apple_driving$Date %in% common_date,]$Value
apple_transit_index <- apple_transit[apple_transit$Date %in% common_date,]$Value
apple_walking_index <- apple_walking[apple_walking$Date %in% common_date,]$Value
df <- data.frame(date, chevron_stock_price, news_sentiment_score, ice_brent_settle, NYMEX_settle, DJ_comp,
DJ_indus, DJ_tran, DJ_utility, SP500_price, apple_driving_index, apple_transit_index,
apple_walking_index)
#df.adj <- data.frame(df[-81,c(1:2, 4:13)], df[-1, 3])
#colnames(df.adj)[13] <- "news_sentiment_score"
#df.norm <- data.frame(df[,1], scale(df[,2]), df[,3], scale(df[,4:13]))
df.norm <- data.frame(df[,1], scale(df[,-1]))
colnames(df.norm) <- names(df)
#attach(df.adj)
cormat <- round(cor(df.norm[,-1]),2)
library(reshape2)
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
lm.1 <- lm(chevron_stock_price ~ . - news_sentiment_score, data = df.norm[,-1])
lm.2 <- lm(chevron_stock_price ~ . , data = df.norm[,-1])
anova(lm.1, lm.2)
library(MASS)
step.model <- stepAIC(lm.2, direction = "both",
trace = FALSE)
summary(step.model)
step.news <- step(lm.2, scope = list(lower = ~ news_sentiment_score), direction = "both",
trace = FALSE)
summary(step.news)
library(tidyverse)
library(caret)
library(leaps)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model2 <- train(chevron_stock_price ~ ., data = df.norm[,-1],
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:11),
trControl = train.control
)
#coef(step.model$finalModel, as.numeric(step.model$bestTune))
coef(step.model2$finalModel, as.numeric(step.model2$bestTune))
#step.model$results
lm.3 <- lm(chevron_stock_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price,
data = df.norm)
lm.4 <- lm(chevron_stock_price ~ ice_brent_settle + DJ_tran + DJ_utility + SP500_price + news_sentiment_score,
data = df.norm)
anova(lm.3, lm.4)
estimated_stock <- step.model$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep1 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(chevron_stock_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'step wise AIC')
estimated_stock <- lm.3$fitted.values
df.estimate <- data.frame(df, estimated_stock)
ggstep2 <- ggplot(df.estimate) +
geom_line(aes(x=date, y=estimated_stock, color = 'red')) +
geom_line(aes(x = date, y = scale(chevron_stock_price), color = 'blue')) + ylab("Price") + xlab('Date') +
scale_color_discrete(name = "", labels = c("Real", "Estimate")) + labs(title = 'stepwise CV')
grid.arrange(ggstep1, ggstep2, nrow = 2, ncol = 1)
